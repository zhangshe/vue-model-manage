//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


Status = {
  'OK_STATUS' : 0,
  'WARNING_STATUS' : 1,
  'DISCARD_STATUS' : 2,
  'ERROR_STATUS' : 3,
  'FATAL_STATUS' : 4,
  'PENDING_STATUS' : 5
};
IntegerAttribute = function(args) {
  this.min = null;
  this.max = null;
  this.start = null;
  this.quantity = null;
  if (args) {
    if (args.min !== undefined && args.min !== null) {
      this.min = args.min;
    }
    if (args.max !== undefined && args.max !== null) {
      this.max = args.max;
    }
    if (args.start !== undefined && args.start !== null) {
      this.start = args.start;
    }
    if (args.quantity !== undefined && args.quantity !== null) {
      this.quantity = args.quantity;
    }
  }
};
IntegerAttribute.prototype = {};
IntegerAttribute.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.min = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.max = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.start = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.quantity = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IntegerAttribute.prototype.write = function(output) {
  output.writeStructBegin('IntegerAttribute');
  if (this.min !== null && this.min !== undefined) {
    output.writeFieldBegin('min', Thrift.Type.I32, 1);
    output.writeI32(this.min);
    output.writeFieldEnd();
  }
  if (this.max !== null && this.max !== undefined) {
    output.writeFieldBegin('max', Thrift.Type.I32, 2);
    output.writeI32(this.max);
    output.writeFieldEnd();
  }
  if (this.start !== null && this.start !== undefined) {
    output.writeFieldBegin('start', Thrift.Type.I32, 3);
    output.writeI32(this.start);
    output.writeFieldEnd();
  }
  if (this.quantity !== null && this.quantity !== undefined) {
    output.writeFieldBegin('quantity', Thrift.Type.STRING, 4);
    output.writeString(this.quantity);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RealAttribute = function(args) {
  this.min = null;
  this.max = null;
  this.start = null;
  this.quantity = null;
  if (args) {
    if (args.min !== undefined && args.min !== null) {
      this.min = args.min;
    }
    if (args.max !== undefined && args.max !== null) {
      this.max = args.max;
    }
    if (args.start !== undefined && args.start !== null) {
      this.start = args.start;
    }
    if (args.quantity !== undefined && args.quantity !== null) {
      this.quantity = args.quantity;
    }
  }
};
RealAttribute.prototype = {};
RealAttribute.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.min = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.max = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.start = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.quantity = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RealAttribute.prototype.write = function(output) {
  output.writeStructBegin('RealAttribute');
  if (this.min !== null && this.min !== undefined) {
    output.writeFieldBegin('min', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.min);
    output.writeFieldEnd();
  }
  if (this.max !== null && this.max !== undefined) {
    output.writeFieldBegin('max', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.max);
    output.writeFieldEnd();
  }
  if (this.start !== null && this.start !== undefined) {
    output.writeFieldBegin('start', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.start);
    output.writeFieldEnd();
  }
  if (this.quantity !== null && this.quantity !== undefined) {
    output.writeFieldBegin('quantity', Thrift.Type.STRING, 4);
    output.writeString(this.quantity);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StringAttribute = function(args) {
  this.start = null;
  if (args) {
    if (args.start !== undefined && args.start !== null) {
      this.start = args.start;
    }
  }
};
StringAttribute.prototype = {};
StringAttribute.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.start = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StringAttribute.prototype.write = function(output) {
  output.writeStructBegin('StringAttribute');
  if (this.start !== null && this.start !== undefined) {
    output.writeFieldBegin('start', Thrift.Type.STRING, 1);
    output.writeString(this.start);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BooleanAttribute = function(args) {
  this.start = null;
  if (args) {
    if (args.start !== undefined && args.start !== null) {
      this.start = args.start;
    }
  }
};
BooleanAttribute.prototype = {};
BooleanAttribute.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.start = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BooleanAttribute.prototype.write = function(output) {
  output.writeStructBegin('BooleanAttribute');
  if (this.start !== null && this.start !== undefined) {
    output.writeFieldBegin('start', Thrift.Type.BOOL, 1);
    output.writeBool(this.start);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EnumerationAttribute = function(args) {
  this.min = null;
  this.max = null;
  this.start = null;
  this.quantity = null;
  if (args) {
    if (args.min !== undefined && args.min !== null) {
      this.min = args.min;
    }
    if (args.max !== undefined && args.max !== null) {
      this.max = args.max;
    }
    if (args.start !== undefined && args.start !== null) {
      this.start = args.start;
    }
    if (args.quantity !== undefined && args.quantity !== null) {
      this.quantity = args.quantity;
    }
  }
};
EnumerationAttribute.prototype = {};
EnumerationAttribute.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.min = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.max = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.start = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.quantity = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EnumerationAttribute.prototype.write = function(output) {
  output.writeStructBegin('EnumerationAttribute');
  if (this.min !== null && this.min !== undefined) {
    output.writeFieldBegin('min', Thrift.Type.I32, 1);
    output.writeI32(this.min);
    output.writeFieldEnd();
  }
  if (this.max !== null && this.max !== undefined) {
    output.writeFieldBegin('max', Thrift.Type.I32, 2);
    output.writeI32(this.max);
    output.writeFieldEnd();
  }
  if (this.start !== null && this.start !== undefined) {
    output.writeFieldBegin('start', Thrift.Type.I32, 3);
    output.writeI32(this.start);
    output.writeFieldEnd();
  }
  if (this.quantity !== null && this.quantity !== undefined) {
    output.writeFieldBegin('quantity', Thrift.Type.STRING, 4);
    output.writeString(this.quantity);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScalarVariableAttribute = function(args) {
  this.integer_attribute = null;
  this.real_attribute = null;
  this.string_attribute = null;
  this.boolean_attribute = null;
  this.enumeration_attribute = null;
  if (args) {
    if (args.integer_attribute !== undefined && args.integer_attribute !== null) {
      this.integer_attribute = new IntegerAttribute(args.integer_attribute);
    }
    if (args.real_attribute !== undefined && args.real_attribute !== null) {
      this.real_attribute = new RealAttribute(args.real_attribute);
    }
    if (args.string_attribute !== undefined && args.string_attribute !== null) {
      this.string_attribute = new StringAttribute(args.string_attribute);
    }
    if (args.boolean_attribute !== undefined && args.boolean_attribute !== null) {
      this.boolean_attribute = new BooleanAttribute(args.boolean_attribute);
    }
    if (args.enumeration_attribute !== undefined && args.enumeration_attribute !== null) {
      this.enumeration_attribute = new EnumerationAttribute(args.enumeration_attribute);
    }
  }
};
ScalarVariableAttribute.prototype = {};
ScalarVariableAttribute.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.integer_attribute = new IntegerAttribute();
        this.integer_attribute.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.real_attribute = new RealAttribute();
        this.real_attribute.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.string_attribute = new StringAttribute();
        this.string_attribute.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.boolean_attribute = new BooleanAttribute();
        this.boolean_attribute.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.enumeration_attribute = new EnumerationAttribute();
        this.enumeration_attribute.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScalarVariableAttribute.prototype.write = function(output) {
  output.writeStructBegin('ScalarVariableAttribute');
  if (this.integer_attribute !== null && this.integer_attribute !== undefined) {
    output.writeFieldBegin('integer_attribute', Thrift.Type.STRUCT, 1);
    this.integer_attribute.write(output);
    output.writeFieldEnd();
  }
  if (this.real_attribute !== null && this.real_attribute !== undefined) {
    output.writeFieldBegin('real_attribute', Thrift.Type.STRUCT, 2);
    this.real_attribute.write(output);
    output.writeFieldEnd();
  }
  if (this.string_attribute !== null && this.string_attribute !== undefined) {
    output.writeFieldBegin('string_attribute', Thrift.Type.STRUCT, 3);
    this.string_attribute.write(output);
    output.writeFieldEnd();
  }
  if (this.boolean_attribute !== null && this.boolean_attribute !== undefined) {
    output.writeFieldBegin('boolean_attribute', Thrift.Type.STRUCT, 4);
    this.boolean_attribute.write(output);
    output.writeFieldEnd();
  }
  if (this.enumeration_attribute !== null && this.enumeration_attribute !== undefined) {
    output.writeFieldBegin('enumeration_attribute', Thrift.Type.STRUCT, 5);
    this.enumeration_attribute.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScalarVariable = function(args) {
  this.name = null;
  this.value_reference = null;
  this.description = null;
  this.initial = null;
  this.causality = null;
  this.variability = null;
  this.attribute = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.value_reference !== undefined && args.value_reference !== null) {
      this.value_reference = args.value_reference;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.initial !== undefined && args.initial !== null) {
      this.initial = args.initial;
    }
    if (args.causality !== undefined && args.causality !== null) {
      this.causality = args.causality;
    }
    if (args.variability !== undefined && args.variability !== null) {
      this.variability = args.variability;
    }
    if (args.attribute !== undefined && args.attribute !== null) {
      this.attribute = new ScalarVariableAttribute(args.attribute);
    }
  }
};
ScalarVariable.prototype = {};
ScalarVariable.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.value_reference = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.initial = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.causality = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.variability = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.attribute = new ScalarVariableAttribute();
        this.attribute.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScalarVariable.prototype.write = function(output) {
  output.writeStructBegin('ScalarVariable');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.value_reference !== null && this.value_reference !== undefined) {
    output.writeFieldBegin('value_reference', Thrift.Type.I64, 2);
    output.writeI64(this.value_reference);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 3);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.initial !== null && this.initial !== undefined) {
    output.writeFieldBegin('initial', Thrift.Type.STRING, 4);
    output.writeString(this.initial);
    output.writeFieldEnd();
  }
  if (this.causality !== null && this.causality !== undefined) {
    output.writeFieldBegin('causality', Thrift.Type.STRING, 5);
    output.writeString(this.causality);
    output.writeFieldEnd();
  }
  if (this.variability !== null && this.variability !== undefined) {
    output.writeFieldBegin('variability', Thrift.Type.STRING, 6);
    output.writeString(this.variability);
    output.writeFieldEnd();
  }
  if (this.attribute !== null && this.attribute !== undefined) {
    output.writeFieldBegin('attribute', Thrift.Type.STRUCT, 7);
    this.attribute.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Unknown = function(args) {
  this.index = null;
  this.dependencies = null;
  this.dependencies_kind = null;
  if (args) {
    if (args.index !== undefined && args.index !== null) {
      this.index = args.index;
    }
    if (args.dependencies !== undefined && args.dependencies !== null) {
      this.dependencies = Thrift.copyList(args.dependencies, [null]);
    }
    if (args.dependencies_kind !== undefined && args.dependencies_kind !== null) {
      this.dependencies_kind = Thrift.copyList(args.dependencies_kind, [null]);
    }
  }
};
Unknown.prototype = {};
Unknown.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.index = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.dependencies = [];
        var _rtmp31 = input.readListBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var elem3 = null;
          elem3 = input.readI32().value;
          this.dependencies.push(elem3);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.dependencies_kind = [];
        var _rtmp35 = input.readListBegin();
        var _size4 = _rtmp35.size || 0;
        for (var _i6 = 0; _i6 < _size4; ++_i6) {
          var elem7 = null;
          elem7 = input.readString().value;
          this.dependencies_kind.push(elem7);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Unknown.prototype.write = function(output) {
  output.writeStructBegin('Unknown');
  if (this.index !== null && this.index !== undefined) {
    output.writeFieldBegin('index', Thrift.Type.I32, 1);
    output.writeI32(this.index);
    output.writeFieldEnd();
  }
  if (this.dependencies !== null && this.dependencies !== undefined) {
    output.writeFieldBegin('dependencies', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.dependencies.length);
    for (var iter8 in this.dependencies) {
      if (this.dependencies.hasOwnProperty(iter8)) {
        iter8 = this.dependencies[iter8];
        output.writeI32(iter8);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.dependencies_kind !== null && this.dependencies_kind !== undefined) {
    output.writeFieldBegin('dependencies_kind', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.dependencies_kind.length);
    for (var iter9 in this.dependencies_kind) {
      if (this.dependencies_kind.hasOwnProperty(iter9)) {
        iter9 = this.dependencies_kind[iter9];
        output.writeString(iter9);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelStructure = function(args) {
  this.outputs = null;
  this.derivatives = null;
  this.initial_unknowns = null;
  if (args) {
    if (args.outputs !== undefined && args.outputs !== null) {
      this.outputs = Thrift.copyList(args.outputs, [Unknown]);
    }
    if (args.derivatives !== undefined && args.derivatives !== null) {
      this.derivatives = Thrift.copyList(args.derivatives, [Unknown]);
    }
    if (args.initial_unknowns !== undefined && args.initial_unknowns !== null) {
      this.initial_unknowns = Thrift.copyList(args.initial_unknowns, [Unknown]);
    }
  }
};
ModelStructure.prototype = {};
ModelStructure.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.outputs = [];
        var _rtmp311 = input.readListBegin();
        var _size10 = _rtmp311.size || 0;
        for (var _i12 = 0; _i12 < _size10; ++_i12) {
          var elem13 = null;
          elem13 = new Unknown();
          elem13.read(input);
          this.outputs.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.derivatives = [];
        var _rtmp315 = input.readListBegin();
        var _size14 = _rtmp315.size || 0;
        for (var _i16 = 0; _i16 < _size14; ++_i16) {
          var elem17 = null;
          elem17 = new Unknown();
          elem17.read(input);
          this.derivatives.push(elem17);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.initial_unknowns = [];
        var _rtmp319 = input.readListBegin();
        var _size18 = _rtmp319.size || 0;
        for (var _i20 = 0; _i20 < _size18; ++_i20) {
          var elem21 = null;
          elem21 = new Unknown();
          elem21.read(input);
          this.initial_unknowns.push(elem21);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelStructure.prototype.write = function(output) {
  output.writeStructBegin('ModelStructure');
  if (this.outputs !== null && this.outputs !== undefined) {
    output.writeFieldBegin('outputs', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.outputs.length);
    for (var iter22 in this.outputs) {
      if (this.outputs.hasOwnProperty(iter22)) {
        iter22 = this.outputs[iter22];
        iter22.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.derivatives !== null && this.derivatives !== undefined) {
    output.writeFieldBegin('derivatives', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.derivatives.length);
    for (var iter23 in this.derivatives) {
      if (this.derivatives.hasOwnProperty(iter23)) {
        iter23 = this.derivatives[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.initial_unknowns !== null && this.initial_unknowns !== undefined) {
    output.writeFieldBegin('initial_unknowns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.initial_unknowns.length);
    for (var iter24 in this.initial_unknowns) {
      if (this.initial_unknowns.hasOwnProperty(iter24)) {
        iter24 = this.initial_unknowns[iter24];
        iter24.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DefaultExperiment = function(args) {
  this.startTime = null;
  this.stopTime = null;
  this.tolerance = null;
  this.stepSize = null;
  if (args) {
    if (args.startTime !== undefined && args.startTime !== null) {
      this.startTime = args.startTime;
    }
    if (args.stopTime !== undefined && args.stopTime !== null) {
      this.stopTime = args.stopTime;
    }
    if (args.tolerance !== undefined && args.tolerance !== null) {
      this.tolerance = args.tolerance;
    }
    if (args.stepSize !== undefined && args.stepSize !== null) {
      this.stepSize = args.stepSize;
    }
  }
};
DefaultExperiment.prototype = {};
DefaultExperiment.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.startTime = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.stopTime = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.tolerance = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.stepSize = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DefaultExperiment.prototype.write = function(output) {
  output.writeStructBegin('DefaultExperiment');
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.startTime);
    output.writeFieldEnd();
  }
  if (this.stopTime !== null && this.stopTime !== undefined) {
    output.writeFieldBegin('stopTime', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.stopTime);
    output.writeFieldEnd();
  }
  if (this.tolerance !== null && this.tolerance !== undefined) {
    output.writeFieldBegin('tolerance', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.tolerance);
    output.writeFieldEnd();
  }
  if (this.stepSize !== null && this.stepSize !== undefined) {
    output.writeFieldBegin('stepSize', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.stepSize);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StepResult = function(args) {
  this.status = null;
  this.simulation_time = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.simulation_time !== undefined && args.simulation_time !== null) {
      this.simulation_time = args.simulation_time;
    }
  }
};
StepResult.prototype = {};
StepResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.simulation_time = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StepResult.prototype.write = function(output) {
  output.writeStructBegin('StepResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.simulation_time !== null && this.simulation_time !== undefined) {
    output.writeFieldBegin('simulation_time', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.simulation_time);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IntegerRead = function(args) {
  this.value = null;
  this.status = null;
  if (args) {
    if (args.value !== undefined && args.value !== null) {
      this.value = Thrift.copyList(args.value, [null]);
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
  }
};
IntegerRead.prototype = {};
IntegerRead.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.value = [];
        var _rtmp326 = input.readListBegin();
        var _size25 = _rtmp326.size || 0;
        for (var _i27 = 0; _i27 < _size25; ++_i27) {
          var elem28 = null;
          elem28 = input.readI32().value;
          this.value.push(elem28);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IntegerRead.prototype.write = function(output) {
  output.writeStructBegin('IntegerRead');
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.value.length);
    for (var iter29 in this.value) {
      if (this.value.hasOwnProperty(iter29)) {
        iter29 = this.value[iter29];
        output.writeI32(iter29);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 2);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RealRead = function(args) {
  this.value = null;
  this.status = null;
  if (args) {
    if (args.value !== undefined && args.value !== null) {
      this.value = Thrift.copyList(args.value, [null]);
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
  }
};
RealRead.prototype = {};
RealRead.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.value = [];
        var _rtmp331 = input.readListBegin();
        var _size30 = _rtmp331.size || 0;
        for (var _i32 = 0; _i32 < _size30; ++_i32) {
          var elem33 = null;
          elem33 = input.readDouble().value;
          this.value.push(elem33);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RealRead.prototype.write = function(output) {
  output.writeStructBegin('RealRead');
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.DOUBLE, this.value.length);
    for (var iter34 in this.value) {
      if (this.value.hasOwnProperty(iter34)) {
        iter34 = this.value[iter34];
        output.writeDouble(iter34);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 2);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StringRead = function(args) {
  this.value = null;
  this.status = null;
  if (args) {
    if (args.value !== undefined && args.value !== null) {
      this.value = Thrift.copyList(args.value, [null]);
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
  }
};
StringRead.prototype = {};
StringRead.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.value = [];
        var _rtmp336 = input.readListBegin();
        var _size35 = _rtmp336.size || 0;
        for (var _i37 = 0; _i37 < _size35; ++_i37) {
          var elem38 = null;
          elem38 = input.readString().value;
          this.value.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StringRead.prototype.write = function(output) {
  output.writeStructBegin('StringRead');
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.value.length);
    for (var iter39 in this.value) {
      if (this.value.hasOwnProperty(iter39)) {
        iter39 = this.value[iter39];
        output.writeString(iter39);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 2);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BooleanRead = function(args) {
  this.value = null;
  this.status = null;
  if (args) {
    if (args.value !== undefined && args.value !== null) {
      this.value = Thrift.copyList(args.value, [null]);
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
  }
};
BooleanRead.prototype = {};
BooleanRead.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.value = [];
        var _rtmp341 = input.readListBegin();
        var _size40 = _rtmp341.size || 0;
        for (var _i42 = 0; _i42 < _size40; ++_i42) {
          var elem43 = null;
          elem43 = input.readBool().value;
          this.value.push(elem43);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BooleanRead.prototype.write = function(output) {
  output.writeStructBegin('BooleanRead');
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.BOOL, this.value.length);
    for (var iter44 in this.value) {
      if (this.value.hasOwnProperty(iter44)) {
        iter44 = this.value[iter44];
        output.writeBool(iter44);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 2);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDescription = function(args) {
  this.guid = null;
  this.fmi_version = null;
  this.modelName = null;
  this.license = null;
  this.copyright = null;
  this.author = null;
  this.version = null;
  this.description = null;
  this.generation_tool = null;
  this.generation_date_and_time = null;
  this.default_experiment = null;
  this.variable_naming_convention = null;
  this.model_variables = null;
  this.model_structure = null;
  this.model_identifier = null;
  this.can_get_and_set_fmu_state = null;
  this.can_serialize_fmu_state = null;
  this.provides_directional_derivative = null;
  this.can_handle_variable_communication_step_size = null;
  this.can_interpolate_inputs = null;
  this.max_output_derivative_order = null;
  if (args) {
    if (args.guid !== undefined && args.guid !== null) {
      this.guid = args.guid;
    }
    if (args.fmi_version !== undefined && args.fmi_version !== null) {
      this.fmi_version = args.fmi_version;
    }
    if (args.modelName !== undefined && args.modelName !== null) {
      this.modelName = args.modelName;
    }
    if (args.license !== undefined && args.license !== null) {
      this.license = args.license;
    }
    if (args.copyright !== undefined && args.copyright !== null) {
      this.copyright = args.copyright;
    }
    if (args.author !== undefined && args.author !== null) {
      this.author = args.author;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.generation_tool !== undefined && args.generation_tool !== null) {
      this.generation_tool = args.generation_tool;
    }
    if (args.generation_date_and_time !== undefined && args.generation_date_and_time !== null) {
      this.generation_date_and_time = args.generation_date_and_time;
    }
    if (args.default_experiment !== undefined && args.default_experiment !== null) {
      this.default_experiment = new DefaultExperiment(args.default_experiment);
    }
    if (args.variable_naming_convention !== undefined && args.variable_naming_convention !== null) {
      this.variable_naming_convention = args.variable_naming_convention;
    }
    if (args.model_variables !== undefined && args.model_variables !== null) {
      this.model_variables = Thrift.copyList(args.model_variables, [ScalarVariable]);
    }
    if (args.model_structure !== undefined && args.model_structure !== null) {
      this.model_structure = new ModelStructure(args.model_structure);
    }
    if (args.model_identifier !== undefined && args.model_identifier !== null) {
      this.model_identifier = args.model_identifier;
    }
    if (args.can_get_and_set_fmu_state !== undefined && args.can_get_and_set_fmu_state !== null) {
      this.can_get_and_set_fmu_state = args.can_get_and_set_fmu_state;
    }
    if (args.can_serialize_fmu_state !== undefined && args.can_serialize_fmu_state !== null) {
      this.can_serialize_fmu_state = args.can_serialize_fmu_state;
    }
    if (args.provides_directional_derivative !== undefined && args.provides_directional_derivative !== null) {
      this.provides_directional_derivative = args.provides_directional_derivative;
    }
    if (args.can_handle_variable_communication_step_size !== undefined && args.can_handle_variable_communication_step_size !== null) {
      this.can_handle_variable_communication_step_size = args.can_handle_variable_communication_step_size;
    }
    if (args.can_interpolate_inputs !== undefined && args.can_interpolate_inputs !== null) {
      this.can_interpolate_inputs = args.can_interpolate_inputs;
    }
    if (args.max_output_derivative_order !== undefined && args.max_output_derivative_order !== null) {
      this.max_output_derivative_order = args.max_output_derivative_order;
    }
  }
};
ModelDescription.prototype = {};
ModelDescription.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.fmi_version = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.modelName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.license = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.copyright = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.author = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.generation_tool = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.generation_date_and_time = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.default_experiment = new DefaultExperiment();
        this.default_experiment.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.variable_naming_convention = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.LIST) {
        this.model_variables = [];
        var _rtmp346 = input.readListBegin();
        var _size45 = _rtmp346.size || 0;
        for (var _i47 = 0; _i47 < _size45; ++_i47) {
          var elem48 = null;
          elem48 = new ScalarVariable();
          elem48.read(input);
          this.model_variables.push(elem48);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRUCT) {
        this.model_structure = new ModelStructure();
        this.model_structure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.model_identifier = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.BOOL) {
        this.can_get_and_set_fmu_state = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.BOOL) {
        this.can_serialize_fmu_state = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.BOOL) {
        this.provides_directional_derivative = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.BOOL) {
        this.can_handle_variable_communication_step_size = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.BOOL) {
        this.can_interpolate_inputs = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.I32) {
        this.max_output_derivative_order = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDescription.prototype.write = function(output) {
  output.writeStructBegin('ModelDescription');
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 1);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.fmi_version !== null && this.fmi_version !== undefined) {
    output.writeFieldBegin('fmi_version', Thrift.Type.STRING, 2);
    output.writeString(this.fmi_version);
    output.writeFieldEnd();
  }
  if (this.modelName !== null && this.modelName !== undefined) {
    output.writeFieldBegin('modelName', Thrift.Type.STRING, 3);
    output.writeString(this.modelName);
    output.writeFieldEnd();
  }
  if (this.license !== null && this.license !== undefined) {
    output.writeFieldBegin('license', Thrift.Type.STRING, 4);
    output.writeString(this.license);
    output.writeFieldEnd();
  }
  if (this.copyright !== null && this.copyright !== undefined) {
    output.writeFieldBegin('copyright', Thrift.Type.STRING, 5);
    output.writeString(this.copyright);
    output.writeFieldEnd();
  }
  if (this.author !== null && this.author !== undefined) {
    output.writeFieldBegin('author', Thrift.Type.STRING, 6);
    output.writeString(this.author);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 7);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 8);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.generation_tool !== null && this.generation_tool !== undefined) {
    output.writeFieldBegin('generation_tool', Thrift.Type.STRING, 9);
    output.writeString(this.generation_tool);
    output.writeFieldEnd();
  }
  if (this.generation_date_and_time !== null && this.generation_date_and_time !== undefined) {
    output.writeFieldBegin('generation_date_and_time', Thrift.Type.STRING, 10);
    output.writeString(this.generation_date_and_time);
    output.writeFieldEnd();
  }
  if (this.default_experiment !== null && this.default_experiment !== undefined) {
    output.writeFieldBegin('default_experiment', Thrift.Type.STRUCT, 11);
    this.default_experiment.write(output);
    output.writeFieldEnd();
  }
  if (this.variable_naming_convention !== null && this.variable_naming_convention !== undefined) {
    output.writeFieldBegin('variable_naming_convention', Thrift.Type.STRING, 12);
    output.writeString(this.variable_naming_convention);
    output.writeFieldEnd();
  }
  if (this.model_variables !== null && this.model_variables !== undefined) {
    output.writeFieldBegin('model_variables', Thrift.Type.LIST, 13);
    output.writeListBegin(Thrift.Type.STRUCT, this.model_variables.length);
    for (var iter49 in this.model_variables) {
      if (this.model_variables.hasOwnProperty(iter49)) {
        iter49 = this.model_variables[iter49];
        iter49.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.model_structure !== null && this.model_structure !== undefined) {
    output.writeFieldBegin('model_structure', Thrift.Type.STRUCT, 14);
    this.model_structure.write(output);
    output.writeFieldEnd();
  }
  if (this.model_identifier !== null && this.model_identifier !== undefined) {
    output.writeFieldBegin('model_identifier', Thrift.Type.STRING, 15);
    output.writeString(this.model_identifier);
    output.writeFieldEnd();
  }
  if (this.can_get_and_set_fmu_state !== null && this.can_get_and_set_fmu_state !== undefined) {
    output.writeFieldBegin('can_get_and_set_fmu_state', Thrift.Type.BOOL, 16);
    output.writeBool(this.can_get_and_set_fmu_state);
    output.writeFieldEnd();
  }
  if (this.can_serialize_fmu_state !== null && this.can_serialize_fmu_state !== undefined) {
    output.writeFieldBegin('can_serialize_fmu_state', Thrift.Type.BOOL, 17);
    output.writeBool(this.can_serialize_fmu_state);
    output.writeFieldEnd();
  }
  if (this.provides_directional_derivative !== null && this.provides_directional_derivative !== undefined) {
    output.writeFieldBegin('provides_directional_derivative', Thrift.Type.BOOL, 18);
    output.writeBool(this.provides_directional_derivative);
    output.writeFieldEnd();
  }
  if (this.can_handle_variable_communication_step_size !== null && this.can_handle_variable_communication_step_size !== undefined) {
    output.writeFieldBegin('can_handle_variable_communication_step_size', Thrift.Type.BOOL, 19);
    output.writeBool(this.can_handle_variable_communication_step_size);
    output.writeFieldEnd();
  }
  if (this.can_interpolate_inputs !== null && this.can_interpolate_inputs !== undefined) {
    output.writeFieldBegin('can_interpolate_inputs', Thrift.Type.BOOL, 20);
    output.writeBool(this.can_interpolate_inputs);
    output.writeFieldEnd();
  }
  if (this.max_output_derivative_order !== null && this.max_output_derivative_order !== undefined) {
    output.writeFieldBegin('max_output_derivative_order', Thrift.Type.I32, 21);
    output.writeI32(this.max_output_derivative_order);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoSuchFmuException = function(args) {
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(NoSuchFmuException, Thrift.TException);
NoSuchFmuException.prototype.name = 'NoSuchFmuException';
NoSuchFmuException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoSuchFmuException.prototype.write = function(output) {
  output.writeStructBegin('NoSuchFmuException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoSuchInstanceException = function(args) {
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(NoSuchInstanceException, Thrift.TException);
NoSuchInstanceException.prototype.name = 'NoSuchInstanceException';
NoSuchInstanceException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoSuchInstanceException.prototype.write = function(output) {
  output.writeStructBegin('NoSuchInstanceException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NoSuchVariableException = function(args) {
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(NoSuchVariableException, Thrift.TException);
NoSuchVariableException.prototype.name = 'NoSuchVariableException';
NoSuchVariableException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoSuchVariableException.prototype.write = function(output) {
  output.writeStructBegin('NoSuchVariableException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UnsupportedOperationException = function(args) {
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(UnsupportedOperationException, Thrift.TException);
UnsupportedOperationException.prototype.name = 'UnsupportedOperationException';
UnsupportedOperationException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UnsupportedOperationException.prototype.write = function(output) {
  output.writeStructBegin('UnsupportedOperationException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DirectionalDerivativeResult = function(args) {
  this.dv_unknown_ref = null;
  this.status = null;
  if (args) {
    if (args.dv_unknown_ref !== undefined && args.dv_unknown_ref !== null) {
      this.dv_unknown_ref = Thrift.copyList(args.dv_unknown_ref, [null]);
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
  }
};
DirectionalDerivativeResult.prototype = {};
DirectionalDerivativeResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.dv_unknown_ref = [];
        var _rtmp351 = input.readListBegin();
        var _size50 = _rtmp351.size || 0;
        for (var _i52 = 0; _i52 < _size50; ++_i52) {
          var elem53 = null;
          elem53 = input.readDouble().value;
          this.dv_unknown_ref.push(elem53);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DirectionalDerivativeResult.prototype.write = function(output) {
  output.writeStructBegin('DirectionalDerivativeResult');
  if (this.dv_unknown_ref !== null && this.dv_unknown_ref !== undefined) {
    output.writeFieldBegin('dv_unknown_ref', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.DOUBLE, this.dv_unknown_ref.length);
    for (var iter54 in this.dv_unknown_ref) {
      if (this.dv_unknown_ref.hasOwnProperty(iter54)) {
        iter54 = this.dv_unknown_ref[iter54];
        output.writeDouble(iter54);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 2);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

