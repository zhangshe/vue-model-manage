//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


//HELPER FUNCTIONS AND STRUCTURES

FmuService_load_from_url_args = function(args) {
  this.url = null;
  if (args) {
    if (args.url !== undefined && args.url !== null) {
      this.url = args.url;
    }
  }
};
FmuService_load_from_url_args.prototype = {};
FmuService_load_from_url_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_load_from_url_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_load_from_url_args');
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 1);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_load_from_url_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
FmuService_load_from_url_result.prototype = {};
FmuService_load_from_url_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_load_from_url_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_load_from_url_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_load_from_file_args = function(args) {
  this.name = null;
  this.data = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = args.data;
    }
  }
};
FmuService_load_from_file_args.prototype = {};
FmuService_load_from_file_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.data = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_load_from_file_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_load_from_file_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRING, 2);
    output.writeBinary(this.data);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_load_from_file_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
FmuService_load_from_file_result.prototype = {};
FmuService_load_from_file_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_load_from_file_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_load_from_file_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_get_model_description_args = function(args) {
  this.fmuId = null;
  if (args) {
    if (args.fmuId !== undefined && args.fmuId !== null) {
      this.fmuId = args.fmuId;
    }
  }
};
FmuService_get_model_description_args.prototype = {};
FmuService_get_model_description_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fmuId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_get_model_description_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_get_model_description_args');
  if (this.fmuId !== null && this.fmuId !== undefined) {
    output.writeFieldBegin('fmuId', Thrift.Type.STRING, 1);
    output.writeString(this.fmuId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_get_model_description_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof NoSuchFmuException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ModelDescription(args.success);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
FmuService_get_model_description_result.prototype = {};
FmuService_get_model_description_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ModelDescription();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new NoSuchFmuException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_get_model_description_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_get_model_description_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_create_instance_args = function(args) {
  this.fmuId = null;
  if (args) {
    if (args.fmuId !== undefined && args.fmuId !== null) {
      this.fmuId = args.fmuId;
    }
  }
};
FmuService_create_instance_args.prototype = {};
FmuService_create_instance_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fmuId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_create_instance_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_create_instance_args');
  if (this.fmuId !== null && this.fmuId !== undefined) {
    output.writeFieldBegin('fmuId', Thrift.Type.STRING, 1);
    output.writeString(this.fmuId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_create_instance_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof UnsupportedOperationException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof NoSuchFmuException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
FmuService_create_instance_result.prototype = {};
FmuService_create_instance_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new UnsupportedOperationException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new NoSuchFmuException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_create_instance_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_create_instance_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_setup_experiment_args = function(args) {
  this.instanceId = null;
  this.start = null;
  this.stop = null;
  this.tolerance = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
    if (args.start !== undefined && args.start !== null) {
      this.start = args.start;
    }
    if (args.stop !== undefined && args.stop !== null) {
      this.stop = args.stop;
    }
    if (args.tolerance !== undefined && args.tolerance !== null) {
      this.tolerance = args.tolerance;
    }
  }
};
FmuService_setup_experiment_args.prototype = {};
FmuService_setup_experiment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.start = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.stop = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.tolerance = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_setup_experiment_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_setup_experiment_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  if (this.start !== null && this.start !== undefined) {
    output.writeFieldBegin('start', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.start);
    output.writeFieldEnd();
  }
  if (this.stop !== null && this.stop !== undefined) {
    output.writeFieldBegin('stop', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.stop);
    output.writeFieldEnd();
  }
  if (this.tolerance !== null && this.tolerance !== undefined) {
    output.writeFieldBegin('tolerance', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.tolerance);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_setup_experiment_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
FmuService_setup_experiment_result.prototype = {};
FmuService_setup_experiment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new NoSuchInstanceException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_setup_experiment_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_setup_experiment_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_enter_initialization_mode_args = function(args) {
  this.instanceId = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
  }
};
FmuService_enter_initialization_mode_args.prototype = {};
FmuService_enter_initialization_mode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_enter_initialization_mode_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_enter_initialization_mode_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_enter_initialization_mode_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
FmuService_enter_initialization_mode_result.prototype = {};
FmuService_enter_initialization_mode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new NoSuchInstanceException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_enter_initialization_mode_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_enter_initialization_mode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_exit_initialization_mode_args = function(args) {
  this.instanceId = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
  }
};
FmuService_exit_initialization_mode_args.prototype = {};
FmuService_exit_initialization_mode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_exit_initialization_mode_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_exit_initialization_mode_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_exit_initialization_mode_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
FmuService_exit_initialization_mode_result.prototype = {};
FmuService_exit_initialization_mode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new NoSuchInstanceException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_exit_initialization_mode_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_exit_initialization_mode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_step_args = function(args) {
  this.instanceId = null;
  this.stepSize = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
    if (args.stepSize !== undefined && args.stepSize !== null) {
      this.stepSize = args.stepSize;
    }
  }
};
FmuService_step_args.prototype = {};
FmuService_step_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.stepSize = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_step_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_step_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  if (this.stepSize !== null && this.stepSize !== undefined) {
    output.writeFieldBegin('stepSize', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.stepSize);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_step_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new StepResult(args.success);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
FmuService_step_result.prototype = {};
FmuService_step_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new StepResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new NoSuchInstanceException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_step_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_step_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_reset_args = function(args) {
  this.instanceId = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
  }
};
FmuService_reset_args.prototype = {};
FmuService_reset_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_reset_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_reset_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_reset_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
FmuService_reset_result.prototype = {};
FmuService_reset_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new NoSuchInstanceException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_reset_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_reset_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_terminate_args = function(args) {
  this.instanceId = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
  }
};
FmuService_terminate_args.prototype = {};
FmuService_terminate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_terminate_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_terminate_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_terminate_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
FmuService_terminate_result.prototype = {};
FmuService_terminate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new NoSuchInstanceException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_terminate_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_terminate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_freeInstance_args = function(args) {
  this.instanceId = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
  }
};
FmuService_freeInstance_args.prototype = {};
FmuService_freeInstance_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_freeInstance_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_freeInstance_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_freeInstance_result = function(args) {
  this.ex = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
FmuService_freeInstance_result.prototype = {};
FmuService_freeInstance_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new NoSuchInstanceException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_freeInstance_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_freeInstance_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_read_integer_args = function(args) {
  this.instanceId = null;
  this.vr = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
    if (args.vr !== undefined && args.vr !== null) {
      this.vr = Thrift.copyList(args.vr, [null]);
    }
  }
};
FmuService_read_integer_args.prototype = {};
FmuService_read_integer_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.vr = [];
        var _rtmp356 = input.readListBegin();
        var _size55 = _rtmp356.size || 0;
        for (var _i57 = 0; _i57 < _size55; ++_i57) {
          var elem58 = null;
          elem58 = input.readI64().value;
          this.vr.push(elem58);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_read_integer_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_read_integer_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  if (this.vr !== null && this.vr !== undefined) {
    output.writeFieldBegin('vr', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.vr.length);
    for (var iter59 in this.vr) {
      if (this.vr.hasOwnProperty(iter59)) {
        iter59 = this.vr[iter59];
        output.writeI64(iter59);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_read_integer_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof NoSuchVariableException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new IntegerRead(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
FmuService_read_integer_result.prototype = {};
FmuService_read_integer_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new IntegerRead();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new NoSuchInstanceException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new NoSuchVariableException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_read_integer_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_read_integer_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_read_real_args = function(args) {
  this.instanceId = null;
  this.vr = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
    if (args.vr !== undefined && args.vr !== null) {
      this.vr = Thrift.copyList(args.vr, [null]);
    }
  }
};
FmuService_read_real_args.prototype = {};
FmuService_read_real_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.vr = [];
        var _rtmp361 = input.readListBegin();
        var _size60 = _rtmp361.size || 0;
        for (var _i62 = 0; _i62 < _size60; ++_i62) {
          var elem63 = null;
          elem63 = input.readI64().value;
          this.vr.push(elem63);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_read_real_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_read_real_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  if (this.vr !== null && this.vr !== undefined) {
    output.writeFieldBegin('vr', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.vr.length);
    for (var iter64 in this.vr) {
      if (this.vr.hasOwnProperty(iter64)) {
        iter64 = this.vr[iter64];
        output.writeI64(iter64);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_read_real_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof NoSuchVariableException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new RealRead(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
FmuService_read_real_result.prototype = {};
FmuService_read_real_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new RealRead();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new NoSuchInstanceException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new NoSuchVariableException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_read_real_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_read_real_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_read_string_args = function(args) {
  this.instanceId = null;
  this.vr = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
    if (args.vr !== undefined && args.vr !== null) {
      this.vr = Thrift.copyList(args.vr, [null]);
    }
  }
};
FmuService_read_string_args.prototype = {};
FmuService_read_string_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.vr = [];
        var _rtmp366 = input.readListBegin();
        var _size65 = _rtmp366.size || 0;
        for (var _i67 = 0; _i67 < _size65; ++_i67) {
          var elem68 = null;
          elem68 = input.readI64().value;
          this.vr.push(elem68);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_read_string_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_read_string_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  if (this.vr !== null && this.vr !== undefined) {
    output.writeFieldBegin('vr', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.vr.length);
    for (var iter69 in this.vr) {
      if (this.vr.hasOwnProperty(iter69)) {
        iter69 = this.vr[iter69];
        output.writeI64(iter69);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_read_string_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof NoSuchVariableException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new StringRead(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
FmuService_read_string_result.prototype = {};
FmuService_read_string_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new StringRead();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new NoSuchInstanceException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new NoSuchVariableException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_read_string_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_read_string_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_read_boolean_args = function(args) {
  this.instanceId = null;
  this.vr = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
    if (args.vr !== undefined && args.vr !== null) {
      this.vr = Thrift.copyList(args.vr, [null]);
    }
  }
};
FmuService_read_boolean_args.prototype = {};
FmuService_read_boolean_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.vr = [];
        var _rtmp371 = input.readListBegin();
        var _size70 = _rtmp371.size || 0;
        for (var _i72 = 0; _i72 < _size70; ++_i72) {
          var elem73 = null;
          elem73 = input.readI64().value;
          this.vr.push(elem73);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_read_boolean_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_read_boolean_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  if (this.vr !== null && this.vr !== undefined) {
    output.writeFieldBegin('vr', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.vr.length);
    for (var iter74 in this.vr) {
      if (this.vr.hasOwnProperty(iter74)) {
        iter74 = this.vr[iter74];
        output.writeI64(iter74);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_read_boolean_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof NoSuchVariableException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new BooleanRead(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
FmuService_read_boolean_result.prototype = {};
FmuService_read_boolean_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new BooleanRead();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new NoSuchInstanceException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new NoSuchVariableException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_read_boolean_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_read_boolean_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_write_integer_args = function(args) {
  this.instanceId = null;
  this.vr = null;
  this.value = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
    if (args.vr !== undefined && args.vr !== null) {
      this.vr = Thrift.copyList(args.vr, [null]);
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = Thrift.copyList(args.value, [null]);
    }
  }
};
FmuService_write_integer_args.prototype = {};
FmuService_write_integer_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.vr = [];
        var _rtmp376 = input.readListBegin();
        var _size75 = _rtmp376.size || 0;
        for (var _i77 = 0; _i77 < _size75; ++_i77) {
          var elem78 = null;
          elem78 = input.readI64().value;
          this.vr.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.value = [];
        var _rtmp380 = input.readListBegin();
        var _size79 = _rtmp380.size || 0;
        for (var _i81 = 0; _i81 < _size79; ++_i81) {
          var elem82 = null;
          elem82 = input.readI32().value;
          this.value.push(elem82);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_write_integer_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_write_integer_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  if (this.vr !== null && this.vr !== undefined) {
    output.writeFieldBegin('vr', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.vr.length);
    for (var iter83 in this.vr) {
      if (this.vr.hasOwnProperty(iter83)) {
        iter83 = this.vr[iter83];
        output.writeI64(iter83);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I32, this.value.length);
    for (var iter84 in this.value) {
      if (this.value.hasOwnProperty(iter84)) {
        iter84 = this.value[iter84];
        output.writeI32(iter84);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_write_integer_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof NoSuchVariableException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
FmuService_write_integer_result.prototype = {};
FmuService_write_integer_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new NoSuchInstanceException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new NoSuchVariableException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_write_integer_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_write_integer_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_write_real_args = function(args) {
  this.instanceId = null;
  this.vr = null;
  this.value = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
    if (args.vr !== undefined && args.vr !== null) {
      this.vr = Thrift.copyList(args.vr, [null]);
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = Thrift.copyList(args.value, [null]);
    }
  }
};
FmuService_write_real_args.prototype = {};
FmuService_write_real_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.vr = [];
        var _rtmp386 = input.readListBegin();
        var _size85 = _rtmp386.size || 0;
        for (var _i87 = 0; _i87 < _size85; ++_i87) {
          var elem88 = null;
          elem88 = input.readI64().value;
          this.vr.push(elem88);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.value = [];
        var _rtmp390 = input.readListBegin();
        var _size89 = _rtmp390.size || 0;
        for (var _i91 = 0; _i91 < _size89; ++_i91) {
          var elem92 = null;
          elem92 = input.readDouble().value;
          this.value.push(elem92);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_write_real_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_write_real_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  if (this.vr !== null && this.vr !== undefined) {
    output.writeFieldBegin('vr', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.vr.length);
    for (var iter93 in this.vr) {
      if (this.vr.hasOwnProperty(iter93)) {
        iter93 = this.vr[iter93];
        output.writeI64(iter93);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.DOUBLE, this.value.length);
    for (var iter94 in this.value) {
      if (this.value.hasOwnProperty(iter94)) {
        iter94 = this.value[iter94];
        output.writeDouble(iter94);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_write_real_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof NoSuchVariableException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
FmuService_write_real_result.prototype = {};
FmuService_write_real_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new NoSuchInstanceException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new NoSuchVariableException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_write_real_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_write_real_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_write_string_args = function(args) {
  this.instanceId = null;
  this.vr = null;
  this.value = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
    if (args.vr !== undefined && args.vr !== null) {
      this.vr = Thrift.copyList(args.vr, [null]);
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = Thrift.copyList(args.value, [null]);
    }
  }
};
FmuService_write_string_args.prototype = {};
FmuService_write_string_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.vr = [];
        var _rtmp396 = input.readListBegin();
        var _size95 = _rtmp396.size || 0;
        for (var _i97 = 0; _i97 < _size95; ++_i97) {
          var elem98 = null;
          elem98 = input.readI64().value;
          this.vr.push(elem98);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.value = [];
        var _rtmp3100 = input.readListBegin();
        var _size99 = _rtmp3100.size || 0;
        for (var _i101 = 0; _i101 < _size99; ++_i101) {
          var elem102 = null;
          elem102 = input.readString().value;
          this.value.push(elem102);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_write_string_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_write_string_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  if (this.vr !== null && this.vr !== undefined) {
    output.writeFieldBegin('vr', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.vr.length);
    for (var iter103 in this.vr) {
      if (this.vr.hasOwnProperty(iter103)) {
        iter103 = this.vr[iter103];
        output.writeI64(iter103);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.value.length);
    for (var iter104 in this.value) {
      if (this.value.hasOwnProperty(iter104)) {
        iter104 = this.value[iter104];
        output.writeString(iter104);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_write_string_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof NoSuchVariableException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
FmuService_write_string_result.prototype = {};
FmuService_write_string_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new NoSuchInstanceException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new NoSuchVariableException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_write_string_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_write_string_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_write_boolean_args = function(args) {
  this.instanceId = null;
  this.vr = null;
  this.value = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
    if (args.vr !== undefined && args.vr !== null) {
      this.vr = Thrift.copyList(args.vr, [null]);
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = Thrift.copyList(args.value, [null]);
    }
  }
};
FmuService_write_boolean_args.prototype = {};
FmuService_write_boolean_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.vr = [];
        var _rtmp3106 = input.readListBegin();
        var _size105 = _rtmp3106.size || 0;
        for (var _i107 = 0; _i107 < _size105; ++_i107) {
          var elem108 = null;
          elem108 = input.readI64().value;
          this.vr.push(elem108);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.value = [];
        var _rtmp3110 = input.readListBegin();
        var _size109 = _rtmp3110.size || 0;
        for (var _i111 = 0; _i111 < _size109; ++_i111) {
          var elem112 = null;
          elem112 = input.readBool().value;
          this.value.push(elem112);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_write_boolean_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_write_boolean_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  if (this.vr !== null && this.vr !== undefined) {
    output.writeFieldBegin('vr', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.vr.length);
    for (var iter113 in this.vr) {
      if (this.vr.hasOwnProperty(iter113)) {
        iter113 = this.vr[iter113];
        output.writeI64(iter113);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.BOOL, this.value.length);
    for (var iter114 in this.value) {
      if (this.value.hasOwnProperty(iter114)) {
        iter114 = this.value[iter114];
        output.writeBool(iter114);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_write_boolean_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof NoSuchVariableException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
FmuService_write_boolean_result.prototype = {};
FmuService_write_boolean_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new NoSuchInstanceException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new NoSuchVariableException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_write_boolean_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_write_boolean_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_get_directional_derivative_args = function(args) {
  this.instanceId = null;
  this.vUnknownRef = null;
  this.vKnownRef = null;
  this.dvKnownRef = null;
  if (args) {
    if (args.instanceId !== undefined && args.instanceId !== null) {
      this.instanceId = args.instanceId;
    }
    if (args.vUnknownRef !== undefined && args.vUnknownRef !== null) {
      this.vUnknownRef = Thrift.copyList(args.vUnknownRef, [null]);
    }
    if (args.vKnownRef !== undefined && args.vKnownRef !== null) {
      this.vKnownRef = Thrift.copyList(args.vKnownRef, [null]);
    }
    if (args.dvKnownRef !== undefined && args.dvKnownRef !== null) {
      this.dvKnownRef = Thrift.copyList(args.dvKnownRef, [null]);
    }
  }
};
FmuService_get_directional_derivative_args.prototype = {};
FmuService_get_directional_derivative_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instanceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.vUnknownRef = [];
        var _rtmp3116 = input.readListBegin();
        var _size115 = _rtmp3116.size || 0;
        for (var _i117 = 0; _i117 < _size115; ++_i117) {
          var elem118 = null;
          elem118 = input.readI64().value;
          this.vUnknownRef.push(elem118);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.vKnownRef = [];
        var _rtmp3120 = input.readListBegin();
        var _size119 = _rtmp3120.size || 0;
        for (var _i121 = 0; _i121 < _size119; ++_i121) {
          var elem122 = null;
          elem122 = input.readI64().value;
          this.vKnownRef.push(elem122);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.dvKnownRef = [];
        var _rtmp3124 = input.readListBegin();
        var _size123 = _rtmp3124.size || 0;
        for (var _i125 = 0; _i125 < _size123; ++_i125) {
          var elem126 = null;
          elem126 = input.readDouble().value;
          this.dvKnownRef.push(elem126);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_get_directional_derivative_args.prototype.write = function(output) {
  output.writeStructBegin('FmuService_get_directional_derivative_args');
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.STRING, 1);
    output.writeString(this.instanceId);
    output.writeFieldEnd();
  }
  if (this.vUnknownRef !== null && this.vUnknownRef !== undefined) {
    output.writeFieldBegin('vUnknownRef', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.vUnknownRef.length);
    for (var iter127 in this.vUnknownRef) {
      if (this.vUnknownRef.hasOwnProperty(iter127)) {
        iter127 = this.vUnknownRef[iter127];
        output.writeI64(iter127);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.vKnownRef !== null && this.vKnownRef !== undefined) {
    output.writeFieldBegin('vKnownRef', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I64, this.vKnownRef.length);
    for (var iter128 in this.vKnownRef) {
      if (this.vKnownRef.hasOwnProperty(iter128)) {
        iter128 = this.vKnownRef[iter128];
        output.writeI64(iter128);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.dvKnownRef !== null && this.dvKnownRef !== undefined) {
    output.writeFieldBegin('dvKnownRef', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.DOUBLE, this.dvKnownRef.length);
    for (var iter129 in this.dvKnownRef) {
      if (this.dvKnownRef.hasOwnProperty(iter129)) {
        iter129 = this.dvKnownRef[iter129];
        output.writeDouble(iter129);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuService_get_directional_derivative_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof NoSuchInstanceException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof UnsupportedOperationException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new DirectionalDerivativeResult(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
FmuService_get_directional_derivative_result.prototype = {};
FmuService_get_directional_derivative_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new DirectionalDerivativeResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new NoSuchInstanceException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new UnsupportedOperationException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FmuService_get_directional_derivative_result.prototype.write = function(output) {
  output.writeStructBegin('FmuService_get_directional_derivative_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FmuServiceClient = function(input, output) {
  this.input = input;
  this.output = (!output) ? input : output;
  this.seqid = 0;
};
FmuServiceClient.prototype = {};

FmuServiceClient.prototype.load_from_url = function(url, callback) {
  this.send_load_from_url(url, callback); 
  if (!callback) {
    return this.recv_load_from_url();
  }
};

FmuServiceClient.prototype.send_load_from_url = function(url, callback) {
  var params = {
    url: url
  };
  var args = new FmuService_load_from_url_args(params);
  try {
    this.output.writeMessageBegin('load_from_url', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_load_from_url();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FmuServiceClient.prototype.recv_load_from_url = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_load_from_url_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'load_from_url failed: unknown result';
};

FmuServiceClient.prototype.load_from_file = function(name, data, callback) {
  this.send_load_from_file(name, data, callback); 
  if (!callback) {
    return this.recv_load_from_file();
  }
};

FmuServiceClient.prototype.send_load_from_file = function(name, data, callback) {
  var params = {
    name: name,
    data: data
  };
  var args = new FmuService_load_from_file_args(params);
  try {
    this.output.writeMessageBegin('load_from_file', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_load_from_file();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FmuServiceClient.prototype.recv_load_from_file = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_load_from_file_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'load_from_file failed: unknown result';
};

FmuServiceClient.prototype.get_model_description = function(fmuId, callback) {
  this.send_get_model_description(fmuId, callback); 
  if (!callback) {
    return this.recv_get_model_description();
  }
};

FmuServiceClient.prototype.send_get_model_description = function(fmuId, callback) {
  var params = {
    fmuId: fmuId
  };
  var args = new FmuService_get_model_description_args(params);
  try {
    this.output.writeMessageBegin('get_model_description', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_get_model_description();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FmuServiceClient.prototype.recv_get_model_description = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_get_model_description_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_model_description failed: unknown result';
};

FmuServiceClient.prototype.create_instance = function(fmuId, callback) {
  this.send_create_instance(fmuId, callback); 
  if (!callback) {
    return this.recv_create_instance();
  }
};

FmuServiceClient.prototype.send_create_instance = function(fmuId, callback) {
  var params = {
    fmuId: fmuId
  };
  var args = new FmuService_create_instance_args(params);
  try {
    this.output.writeMessageBegin('create_instance', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_create_instance();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FmuServiceClient.prototype.recv_create_instance = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_create_instance_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'create_instance failed: unknown result';
};

FmuServiceClient.prototype.setup_experiment = function(instanceId, start, stop, tolerance, callback) {
  this.send_setup_experiment(instanceId, start, stop, tolerance, callback); 
  if (!callback) {
    return this.recv_setup_experiment();
  }
};

FmuServiceClient.prototype.send_setup_experiment = function(instanceId, start, stop, tolerance, callback) {
  var params = {
    instanceId: instanceId,
    start: start,
    stop: stop,
    tolerance: tolerance
  };
  var args = new FmuService_setup_experiment_args(params);
  try {
    this.output.writeMessageBegin('setup_experiment', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_setup_experiment();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FmuServiceClient.prototype.recv_setup_experiment = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_setup_experiment_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'setup_experiment failed: unknown result';
};

FmuServiceClient.prototype.enter_initialization_mode = function(instanceId, callback) {
  this.send_enter_initialization_mode(instanceId, callback); 
  if (!callback) {
    return this.recv_enter_initialization_mode();
  }
};

FmuServiceClient.prototype.send_enter_initialization_mode = function(instanceId, callback) {
  var params = {
    instanceId: instanceId
  };
  var args = new FmuService_enter_initialization_mode_args(params);
  try {
    this.output.writeMessageBegin('enter_initialization_mode', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_enter_initialization_mode();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FmuServiceClient.prototype.recv_enter_initialization_mode = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_enter_initialization_mode_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'enter_initialization_mode failed: unknown result';
};

FmuServiceClient.prototype.exit_initialization_mode = function(instanceId, callback) {
  this.send_exit_initialization_mode(instanceId, callback); 
  if (!callback) {
    return this.recv_exit_initialization_mode();
  }
};

FmuServiceClient.prototype.send_exit_initialization_mode = function(instanceId, callback) {
  var params = {
    instanceId: instanceId
  };
  var args = new FmuService_exit_initialization_mode_args(params);
  try {
    this.output.writeMessageBegin('exit_initialization_mode', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_exit_initialization_mode();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FmuServiceClient.prototype.recv_exit_initialization_mode = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_exit_initialization_mode_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'exit_initialization_mode failed: unknown result';
};

FmuServiceClient.prototype.step = function(instanceId, stepSize, callback) {
  this.send_step(instanceId, stepSize, callback); 
  if (!callback) {
    return this.recv_step();
  }
};

FmuServiceClient.prototype.send_step = function(instanceId, stepSize, callback) {
  var params = {
    instanceId: instanceId,
    stepSize: stepSize
  };
  var args = new FmuService_step_args(params);
  try {
    this.output.writeMessageBegin('step', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_step();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FmuServiceClient.prototype.recv_step = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_step_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'step failed: unknown result';
};

FmuServiceClient.prototype.reset = function(instanceId, callback) {
  this.send_reset(instanceId, callback); 
  if (!callback) {
    return this.recv_reset();
  }
};

FmuServiceClient.prototype.send_reset = function(instanceId, callback) {
  var params = {
    instanceId: instanceId
  };
  var args = new FmuService_reset_args(params);
  try {
    this.output.writeMessageBegin('reset', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_reset();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FmuServiceClient.prototype.recv_reset = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_reset_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'reset failed: unknown result';
};

FmuServiceClient.prototype.terminate = function(instanceId, callback) {
  this.send_terminate(instanceId, callback); 
  if (!callback) {
    return this.recv_terminate();
  }
};

FmuServiceClient.prototype.send_terminate = function(instanceId, callback) {
  var params = {
    instanceId: instanceId
  };
  var args = new FmuService_terminate_args(params);
  try {
    this.output.writeMessageBegin('terminate', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_terminate();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FmuServiceClient.prototype.recv_terminate = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_terminate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'terminate failed: unknown result';
};

FmuServiceClient.prototype.freeInstance = function(instanceId, callback) {
  this.send_freeInstance(instanceId, callback); 
  if (!callback) {
  this.recv_freeInstance();
  }
};

FmuServiceClient.prototype.send_freeInstance = function(instanceId, callback) {
  var params = {
    instanceId: instanceId
  };
  var args = new FmuService_freeInstance_args(params);
  try {
    this.output.writeMessageBegin('freeInstance', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_freeInstance();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FmuServiceClient.prototype.recv_freeInstance = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_freeInstance_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};

FmuServiceClient.prototype.read_integer = function(instanceId, vr, callback) {
  this.send_read_integer(instanceId, vr, callback); 
  if (!callback) {
    return this.recv_read_integer();
  }
};

FmuServiceClient.prototype.send_read_integer = function(instanceId, vr, callback) {
  var params = {
    instanceId: instanceId,
    vr: vr
  };
  var args = new FmuService_read_integer_args(params);
  try {
    this.output.writeMessageBegin('read_integer', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_read_integer();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FmuServiceClient.prototype.recv_read_integer = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_read_integer_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'read_integer failed: unknown result';
};

FmuServiceClient.prototype.read_real = function(instanceId, vr, callback) {
  this.send_read_real(instanceId, vr, callback); 
  if (!callback) {
    return this.recv_read_real();
  }
};

FmuServiceClient.prototype.send_read_real = function(instanceId, vr, callback) {
  var params = {
    instanceId: instanceId,
    vr: vr
  };
  var args = new FmuService_read_real_args(params);
  try {
    this.output.writeMessageBegin('read_real', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_read_real();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FmuServiceClient.prototype.recv_read_real = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_read_real_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'read_real failed: unknown result';
};

FmuServiceClient.prototype.read_string = function(instanceId, vr, callback) {
  this.send_read_string(instanceId, vr, callback); 
  if (!callback) {
    return this.recv_read_string();
  }
};

FmuServiceClient.prototype.send_read_string = function(instanceId, vr, callback) {
  var params = {
    instanceId: instanceId,
    vr: vr
  };
  var args = new FmuService_read_string_args(params);
  try {
    this.output.writeMessageBegin('read_string', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_read_string();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FmuServiceClient.prototype.recv_read_string = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_read_string_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'read_string failed: unknown result';
};

FmuServiceClient.prototype.read_boolean = function(instanceId, vr, callback) {
  this.send_read_boolean(instanceId, vr, callback); 
  if (!callback) {
    return this.recv_read_boolean();
  }
};

FmuServiceClient.prototype.send_read_boolean = function(instanceId, vr, callback) {
  var params = {
    instanceId: instanceId,
    vr: vr
  };
  var args = new FmuService_read_boolean_args(params);
  try {
    this.output.writeMessageBegin('read_boolean', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_read_boolean();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FmuServiceClient.prototype.recv_read_boolean = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_read_boolean_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'read_boolean failed: unknown result';
};

FmuServiceClient.prototype.write_integer = function(instanceId, vr, value, callback) {
  this.send_write_integer(instanceId, vr, value, callback); 
  if (!callback) {
    return this.recv_write_integer();
  }
};

FmuServiceClient.prototype.send_write_integer = function(instanceId, vr, value, callback) {
  var params = {
    instanceId: instanceId,
    vr: vr,
    value: value
  };
  var args = new FmuService_write_integer_args(params);
  try {
    this.output.writeMessageBegin('write_integer', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_write_integer();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FmuServiceClient.prototype.recv_write_integer = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_write_integer_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'write_integer failed: unknown result';
};

FmuServiceClient.prototype.write_real = function(instanceId, vr, value, callback) {
  this.send_write_real(instanceId, vr, value, callback); 
  if (!callback) {
    return this.recv_write_real();
  }
};

FmuServiceClient.prototype.send_write_real = function(instanceId, vr, value, callback) {
  var params = {
    instanceId: instanceId,
    vr: vr,
    value: value
  };
  var args = new FmuService_write_real_args(params);
  try {
    this.output.writeMessageBegin('write_real', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_write_real();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FmuServiceClient.prototype.recv_write_real = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_write_real_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'write_real failed: unknown result';
};

FmuServiceClient.prototype.write_string = function(instanceId, vr, value, callback) {
  this.send_write_string(instanceId, vr, value, callback); 
  if (!callback) {
    return this.recv_write_string();
  }
};

FmuServiceClient.prototype.send_write_string = function(instanceId, vr, value, callback) {
  var params = {
    instanceId: instanceId,
    vr: vr,
    value: value
  };
  var args = new FmuService_write_string_args(params);
  try {
    this.output.writeMessageBegin('write_string', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_write_string();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FmuServiceClient.prototype.recv_write_string = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_write_string_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'write_string failed: unknown result';
};

FmuServiceClient.prototype.write_boolean = function(instanceId, vr, value, callback) {
  this.send_write_boolean(instanceId, vr, value, callback); 
  if (!callback) {
    return this.recv_write_boolean();
  }
};

FmuServiceClient.prototype.send_write_boolean = function(instanceId, vr, value, callback) {
  var params = {
    instanceId: instanceId,
    vr: vr,
    value: value
  };
  var args = new FmuService_write_boolean_args(params);
  try {
    this.output.writeMessageBegin('write_boolean', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_write_boolean();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FmuServiceClient.prototype.recv_write_boolean = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_write_boolean_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'write_boolean failed: unknown result';
};

FmuServiceClient.prototype.get_directional_derivative = function(instanceId, vUnknownRef, vKnownRef, dvKnownRef, callback) {
  this.send_get_directional_derivative(instanceId, vUnknownRef, vKnownRef, dvKnownRef, callback); 
  if (!callback) {
    return this.recv_get_directional_derivative();
  }
};

FmuServiceClient.prototype.send_get_directional_derivative = function(instanceId, vUnknownRef, vKnownRef, dvKnownRef, callback) {
  var params = {
    instanceId: instanceId,
    vUnknownRef: vUnknownRef,
    vKnownRef: vKnownRef,
    dvKnownRef: dvKnownRef
  };
  var args = new FmuService_get_directional_derivative_args(params);
  try {
    this.output.writeMessageBegin('get_directional_derivative', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_get_directional_derivative();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

FmuServiceClient.prototype.recv_get_directional_derivative = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FmuService_get_directional_derivative_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex1) {
    throw result.ex1;
  }
  if (null !== result.ex2) {
    throw result.ex2;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_directional_derivative failed: unknown result';
};
